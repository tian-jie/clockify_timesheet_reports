{"version":3,"sources":["jquery.fileupload-video.js"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;AAWA;AACA;;AAEA,CAAE,WAAU,OAAV,EAAmB;AACjB;;AACA,QAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAA3C,EAAgD;AAC5C;AACA,eAAO,CACH,QADG,EAEH,YAFG,EAGH,6BAHG,CAAP,EAIG,OAJH;AAKH,KAPD,MAOO,IAAI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAvB,EAAiC;AACpC;AACA,gBACI,QAAQ,QAAR,CADJ,EAEI,QAAQ,YAAR,CAFJ;AAIH,KANM,MAMA;AACH;AACA,gBACI,OAAO,MADX,EAEI,OAAO,SAFX;AAIH;AACJ,CAtBC,EAsBA,UAAU,CAAV,EAAa,SAAb,EAAwB;AACtB;;AAEA;;AACA,MAAE,OAAF,CAAU,UAAV,CAAqB,SAArB,CAA+B,OAA/B,CAAuC,YAAvC,CAAoD,OAApD,CACI;AACI,gBAAQ,WADZ;AAEI;AACA,gBAAQ,IAHZ;AAII,mBAAW,GAJf;AAKI,qBAAa,GALjB;AAMI,kBAAU;AANd,KADJ,EASI;AACI,gBAAQ,UADZ;AAEI,cAAM,mBAFV;AAGI,kBAAU;AAHd,KATJ;;AAgBA;AACA;AACA,MAAE,MAAF,CAAS,oBAAT,EAA+B,EAAE,OAAF,CAAU,UAAzC,EAAqD;;AAEjD,iBAAS;AACL;AACA;AACA,gCAAoB;AAHf,SAFwC;;AAQjD,uBAAe,SAAS,aAAT,CAAuB,OAAvB,CARkC;;AAUjD,wBAAgB;;AAEZ;AACA;AACA;AACA;AACA,uBAAW,mBAAU,IAAV,EAAgB,OAAhB,EAAyB;AAChC,oBAAI,QAAQ,QAAZ,EAAsB;AAClB,2BAAO,IAAP;AACH;AACD,oBAAI,OAAO,KAAK,KAAL,CAAW,KAAK,KAAhB,CAAX;AAAA,oBACI,GADJ;AAAA,oBAEI,KAFJ;AAGA,oBAAI,KAAK,aAAL,CAAmB,WAAnB,IACI,KAAK,aAAL,CAAmB,WAAnB,CAA+B,KAAK,IAApC,CADJ,KAEK,EAAE,IAAF,CAAO,QAAQ,WAAf,MAAgC,QAAhC,IACG,KAAK,IAAL,IAAa,QAAQ,WAH7B,MAIK,CAAC,QAAQ,SAAT,IACG,QAAQ,SAAR,CAAkB,IAAlB,CAAuB,KAAK,IAA5B,CALR,CAAJ,EAKgD;AAC5C,0BAAM,UAAU,eAAV,CAA0B,IAA1B,CAAN;AACA,wBAAI,GAAJ,EAAS;AACL,gCAAQ,KAAK,aAAL,CAAmB,SAAnB,CAA6B,KAA7B,CAAR;AACA,8BAAM,GAAN,GAAY,GAAZ;AACA,8BAAM,QAAN,GAAiB,IAAjB;AACA,6BAAK,KAAL,GAAa,KAAb;AACA,+BAAO,IAAP;AACH;AACJ;AACD,uBAAO,IAAP;AACH,aA7BW;;AA+BZ;AACA,sBAAU,kBAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC/B,oBAAI,KAAK,KAAL,IAAc,CAAC,QAAQ,QAA3B,EAAqC;AACjC,yBAAK,KAAL,CAAW,KAAK,KAAhB,EAAuB,QAAQ,IAAR,IAAgB,SAAvC,IAAoD,KAAK,KAAzD;AACH;AACD,uBAAO,IAAP;AACH;;AArCW;;AAViC,KAArD;AAqDH,CAjGC,CAAD","file":"jquery.fileupload-video-compiled.js","sourcesContent":["/*\n * jQuery File Upload Video Preview Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, document */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'load-image',\n            './jquery.fileupload-process'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('load-image')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadVideo',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            disabled: '@disableVideoPreview'\n        },\n        {\n            action: 'setVideo',\n            name: '@videoPreviewName',\n            disabled: '@disableVideoPreview'\n        }\n    );\n\n    // The File Upload Video Preview plugin extends the fileupload widget\n    // with video preview functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of video files to load,\n            // matched against the file type:\n            loadVideoFileTypes: /^video\\/.*$/\n        },\n\n        _videoElement: document.createElement('video'),\n\n        processActions: {\n\n            // Loads the video file given via data.files and data.index\n            // as video element if the browser supports playing it.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadVideo: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    url,\n                    video;\n                if (this._videoElement.canPlayType &&\n                        this._videoElement.canPlayType(file.type) &&\n                        ($.type(options.maxFileSize) !== 'number' ||\n                            file.size <= options.maxFileSize) &&\n                        (!options.fileTypes ||\n                            options.fileTypes.test(file.type))) {\n                    url = loadImage.createObjectURL(file);\n                    if (url) {\n                        video = this._videoElement.cloneNode(false);\n                        video.src = url;\n                        video.controls = true;\n                        data.video = video;\n                        return data;\n                    }\n                }\n                return data;\n            },\n\n            // Sets the video element as a property of the file object:\n            setVideo: function (data, options) {\n                if (data.video && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.video;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n"]}