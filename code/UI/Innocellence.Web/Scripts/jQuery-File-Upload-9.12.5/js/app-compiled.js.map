{"version":3,"sources":["app.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;AAWA;AACA;;AAEA,CAAE,aAAY;AACV;;AAEA,QAAI,aAAa,OAAO,QAAP,CAAgB,QAAhB,KAA6B,mBAA9C;AAAA,QACI,MAAM,aAAa,mCAAb,GAAmD,aAD7D;;AAGA,YAAQ,MAAR,CAAe,MAAf,EAAuB,CACnB,oBADmB,CAAvB,EAGK,MAHL,CAGY,CACJ,eADI,EACa,oBADb,EAEJ,UAAU,aAAV,EAAyB,kBAAzB,EAA6C;AACzC,eAAO,cAAc,QAAd,CAAuB,OAAvB,CAA+B,MAA/B,CAAsC,kBAAtC,CAAP;AACA,2BAAmB,QAAnB,CAA4B,QAA5B,GAAuC,OAAO,QAAP,CAAgB,IAAhB,CAAqB,OAArB,CACnC,WADmC,EAEnC,sBAFmC,CAAvC;AAIA,YAAI,UAAJ,EAAgB;AACZ;AACA,oBAAQ,MAAR,CAAe,mBAAmB,QAAlC,EAA4C;AACxC;AACA;AACA;AACA,oCAAoB,4BACf,IADe,CACV,OAAO,SAAP,CAAiB,SADP,CAJoB;AAMxC,6BAAa,MAN2B;AAOxC,iCAAiB;AAPuB,aAA5C;AASH;AACJ,KApBG,CAHZ,EA0BK,UA1BL,CA0BgB,0BA1BhB,EA0B4C,CACpC,QADoC,EAC1B,OAD0B,EACjB,SADiB,EACN,SADM,EAEpC,UAAU,MAAV,EAAkB,KAAlB,EAAyB;AACrB,eAAO,OAAP,GAAiB;AACb,iBAAK;AADQ,SAAjB;AAGA,YAAI,CAAC,UAAL,EAAiB;AACb,mBAAO,YAAP,GAAsB,IAAtB;AACA,kBAAM,GAAN,CAAU,GAAV,EACK,IADL,CAEQ,UAAU,QAAV,EAAoB;AAChB,uBAAO,YAAP,GAAsB,KAAtB;AACA,uBAAO,KAAP,GAAe,SAAS,IAAT,CAAc,KAAd,IAAuB,EAAtC;AACH,aALT,EAMQ,YAAY;AACR,uBAAO,YAAP,GAAsB,KAAtB;AACH,aART;AAUH;AACJ,KAnBmC,CA1B5C,EAgDK,UAhDL,CAgDgB,uBAhDhB,EAgDyC,CACjC,QADiC,EACvB,OADuB,EAEjC,UAAU,MAAV,EAAkB,KAAlB,EAAyB;AACrB,YAAI,OAAO,OAAO,IAAlB;AAAA,YACI,KADJ;AAEA,YAAI,KAAK,GAAT,EAAc;AACV,iBAAK,MAAL,GAAc,YAAY;AACtB,uBAAO,KAAP;AACH,aAFD;AAGA,iBAAK,QAAL,GAAgB,YAAY;AACxB,wBAAQ,SAAR;AACA,uBAAO,MAAM;AACT,yBAAK,KAAK,SADD;AAET,4BAAQ,KAAK;AAFJ,iBAAN,EAGJ,IAHI,CAIH,YAAY;AACR,4BAAQ,UAAR;AACA,2BAAO,KAAP,CAAa,IAAb;AACH,iBAPE,EAQH,YAAY;AACR,4BAAQ,UAAR;AACH,iBAVE,CAAP;AAYH,aAdD;AAeH,SAnBD,MAmBO,IAAI,CAAC,KAAK,OAAN,IAAiB,CAAC,KAAK,MAA3B,EAAmC;AACtC,iBAAK,OAAL,GAAe,YAAY;AACvB,uBAAO,KAAP,CAAa,IAAb;AACH,aAFD;AAGH;AACJ,KA7BgC,CAhDzC;AAgFH,CAtFC,GAAD","file":"app-compiled.js","sourcesContent":["/*\n * jQuery File Upload Plugin Angular JS Example\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global window, angular */\n\n;(function () {\n    'use strict';\n\n    var isOnGitHub = window.location.hostname === 'blueimp.github.io',\n        url = isOnGitHub ? '//jquery-file-upload.appspot.com/' : 'server/php/';\n\n    angular.module('demo', [\n        'blueimp.fileupload'\n    ])\n        .config([\n            '$httpProvider', 'fileUploadProvider',\n            function ($httpProvider, fileUploadProvider) {\n                delete $httpProvider.defaults.headers.common['X-Requested-With'];\n                fileUploadProvider.defaults.redirect = window.location.href.replace(\n                    /\\/[^\\/]*$/,\n                    '/cors/result.html?%s'\n                );\n                if (isOnGitHub) {\n                    // Demo settings:\n                    angular.extend(fileUploadProvider.defaults, {\n                        // Enable image resizing, except for Android and Opera,\n                        // which actually support image resizing, but fail to\n                        // send Blob objects via XHR requests:\n                        disableImageResize: /Android(?!.*Chrome)|Opera/\n                            .test(window.navigator.userAgent),\n                        maxFileSize: 999000,\n                        acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i\n                    });\n                }\n            }\n        ])\n\n        .controller('DemoFileUploadController', [\n            '$scope', '$http', '$filter', '$window',\n            function ($scope, $http) {\n                $scope.options = {\n                    url: url\n                };\n                if (!isOnGitHub) {\n                    $scope.loadingFiles = true;\n                    $http.get(url)\n                        .then(\n                            function (response) {\n                                $scope.loadingFiles = false;\n                                $scope.queue = response.data.files || [];\n                            },\n                            function () {\n                                $scope.loadingFiles = false;\n                            }\n                        );\n                }\n            }\n        ])\n\n        .controller('FileDestroyController', [\n            '$scope', '$http',\n            function ($scope, $http) {\n                var file = $scope.file,\n                    state;\n                if (file.url) {\n                    file.$state = function () {\n                        return state;\n                    };\n                    file.$destroy = function () {\n                        state = 'pending';\n                        return $http({\n                            url: file.deleteUrl,\n                            method: file.deleteType\n                        }).then(\n                            function () {\n                                state = 'resolved';\n                                $scope.clear(file);\n                            },\n                            function () {\n                                state = 'rejected';\n                            }\n                        );\n                    };\n                } else if (!file.$cancel && !file._index) {\n                    file.$cancel = function () {\n                        $scope.clear(file);\n                    };\n                }\n            }\n        ]);\n\n}());\n"]}