{"version":3,"sources":["jquery.fileupload-image.js"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;AAWA;AACA;;AAEA,CAAE,WAAU,OAAV,EAAmB;AACjB;;AACA,QAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAA3C,EAAgD;AAC5C;AACA,eAAO,CACH,QADG,EAEH,YAFG,EAGH,iBAHG,EAIH,iBAJG,EAKH,gBALG,EAMH,6BANG,CAAP,EAOG,OAPH;AAQH,KAVD,MAUO,IAAI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAvB,EAAiC;AACpC;AACA,gBACI,QAAQ,QAAR,CADJ,EAEI,QAAQ,kCAAR,CAFJ,EAGI,QAAQ,uCAAR,CAHJ,EAII,QAAQ,uCAAR,CAJJ,EAKI,QAAQ,wBAAR,CALJ,EAMI,QAAQ,6BAAR,CANJ;AAQH,KAVM,MAUA;AACH;AACA,gBACI,OAAO,MADX,EAEI,OAAO,SAFX;AAIH;AACJ,CA7BC,EA6BA,UAAU,CAAV,EAAa,UAAb,EAAwB;AACtB;;AAEA;;AACA,MAAE,OAAF,CAAU,UAAV,CAAqB,SAArB,CAA+B,OAA/B,CAAuC,YAAvC,CAAoD,OAApD,CACI;AACI,gBAAQ,mBADZ;AAEI,0BAAkB,GAFtB;AAGI,qBAAa,GAHjB;AAII,8BAAsB,GAJ1B;AAKI,wBAAgB,GALpB;AAMI,wBAAgB,GANpB;AAOI,kBAAU;AAPd,KADJ,EAUI;AACI,gBAAQ,WADZ;AAEI;AACA,gBAAQ,IAHZ;AAII,mBAAW,GAJf;AAKI,qBAAa,GALjB;AAMI,kBAAU,GANd;AAOI,kBAAU;AAPd,KAVJ,EAmBI;AACI,gBAAQ,aADZ;AAEI;AACA,gBAAQ,OAHZ;AAII,kBAAU,GAJd;AAKI,mBAAW,GALf;AAMI,kBAAU,GANd;AAOI,mBAAW,GAPf;AAQI,cAAM,GARV;AASI,qBAAa,GATjB;AAUI,qBAAa,GAVjB;AAWI,kBAAU;AAXd,KAnBJ,EAgCI;AACI,gBAAQ,WADZ;AAEI,iBAAS,eAFb;AAGI,cAAM,YAHV;AAII,kBAAU;AAJd,KAhCJ,EAsCI;AACI,gBAAQ,mBADZ;AAEI,kBAAU;AAFd,KAtCJ,EA0CI;AACI,gBAAQ,aADZ;AAEI;AACA,gBAAQ,SAHZ;AAII,kBAAU,GAJd;AAKI,mBAAW,GALf;AAMI,kBAAU,GANd;AAOI,mBAAW,GAPf;AAQI,cAAM,GARV;AASI,qBAAa,GATjB;AAUI,mBAAW,GAVf;AAWI,gBAAQ,GAXZ;AAYI,kBAAU;AAZd,KA1CJ,EAwDI;AACI,gBAAQ,UADZ;AAEI,cAAM,mBAFV;AAGI,kBAAU;AAHd,KAxDJ,EA6DI;AACI,gBAAQ,uBADZ;AAEI,kBAAU;AAFd,KA7DJ;;AAmEA;AACA;AACA,MAAE,MAAF,CAAS,oBAAT,EAA+B,EAAE,OAAF,CAAU,UAAzC,EAAqD;;AAEjD,iBAAS;AACL;AACA;AACA,gCAAoB,kCAHf;AAIL;AACA,kCAAsB,QALjB,EAK2B;AAChC;AACA,2BAAe,IAPV;AAQL;AACA,4BAAgB,IATX;AAUL;AACA;AACA,8BAAkB,KAZb;AAaL;AACA,uBAAW,KAdN;AAeL;AACA,gCAAoB,IAhBf;AAiBL;AACA,6BAAiB,EAlBZ;AAmBL;AACA,8BAAkB,EApBb;AAqBL;AACA;AACA,gCAAoB,IAvBf;AAwBL;AACA,8BAAkB,IAzBb;AA0BL;AACA,yBAAa,KA3BR;AA4BL;AACA,2BAAe;AA7BV,SAFwC;;AAkCjD,wBAAgB;;AAEZ;AACA;AACA;AACA;AACA,uBAAW,mBAAU,IAAV,EAAgB,OAAhB,EAAyB;AAChC,oBAAI,QAAQ,QAAZ,EAAsB;AAClB,2BAAO,IAAP;AACH;AACD,oBAAI,OAAO,IAAX;AAAA,oBACI,OAAO,KAAK,KAAL,CAAW,KAAK,KAAhB,CADX;AAAA,oBAEI,MAAM,EAAE,QAAF,EAFV;AAGA,oBAAK,EAAE,IAAF,CAAO,QAAQ,WAAf,MAAgC,QAAhC,IACO,KAAK,IAAL,GAAY,QAAQ,WAD5B,IAEK,QAAQ,SAAR,IACG,CAAC,QAAQ,SAAR,CAAkB,IAAlB,CAAuB,KAAK,IAA5B,CAHT,IAII,CAAC,WACG,IADH,EAEG,UAAU,GAAV,EAAe;AACX,wBAAI,IAAI,GAAR,EAAa;AACT,6BAAK,GAAL,GAAW,GAAX;AACH;AACD,wBAAI,WAAJ,CAAgB,IAAhB,EAAsB,CAAC,IAAD,CAAtB;AACH,iBAPJ,EAQG,OARH,CAJT,EAaW;AACP,2BAAO,IAAP;AACH;AACD,uBAAO,IAAI,OAAJ,EAAP;AACH,aA9BW;;AAgCZ;AACA;AACA;AACA;AACA;AACA,yBAAa,qBAAU,IAAV,EAAgB,OAAhB,EAAyB;AAClC,oBAAI,QAAQ,QAAR,IAAoB,EAAE,KAAK,MAAL,IAAe,KAAK,GAAtB,CAAxB,EAAoD;AAChD,2BAAO,IAAP;AACH;AACD,0BAAU,EAAE,MAAF,CAAS,EAAC,QAAQ,IAAT,EAAT,EAAyB,OAAzB,CAAV;AACA,oBAAI,OAAO,IAAX;AAAA,oBACI,MAAM,EAAE,QAAF,EADV;AAAA,oBAEI,MAAO,QAAQ,MAAR,IAAkB,KAAK,MAAxB,IAAmC,KAAK,GAFlD;AAAA,oBAGI,UAAU,SAAV,OAAU,CAAU,MAAV,EAAkB;AACxB,wBAAI,WAAW,OAAO,KAAP,KAAiB,IAAI,KAArB,IACP,OAAO,MAAP,KAAkB,IAAI,MADf,IAEP,QAAQ,WAFZ,CAAJ,EAE8B;AAC1B,6BAAK,OAAO,UAAP,GAAoB,QAApB,GAA+B,KAApC,IAA6C,MAA7C;AACH;AACD,yBAAK,OAAL,GAAe,MAAf;AACA,wBAAI,WAAJ,CAAgB,IAAhB,EAAsB,CAAC,IAAD,CAAtB;AACH,iBAXL;AAAA,oBAYI,SAZJ;AAaA,oBAAI,KAAK,IAAT,EAAe;AACX,wBAAI,QAAQ,WAAR,KAAwB,IAA5B,EAAkC;AAC9B,gCAAQ,WAAR,GAAsB,KAAK,IAAL,CAAU,GAAV,CAAc,aAAd,CAAtB;AACH;AACD,wBAAI,QAAQ,SAAZ,EAAuB;AACnB,oCAAY,KAAK,IAAL,CAAU,GAAV,CAAc,WAAd,CAAZ;AACA,4BAAI,SAAJ,EAAe;AACX,uCAAU,SAAV,EAAqB,OAArB,EAA8B,OAA9B;AACA,mCAAO,IAAI,OAAJ,EAAP;AACH;AACJ;AACD;AACA,wBAAI,KAAK,WAAT,EAAsB;AAClB,+BAAO,QAAQ,WAAf;AACH,qBAFD,MAEO;AACH,6BAAK,WAAL,GAAmB,QAAQ,WAA3B;AACH;AACJ;AACD,oBAAI,GAAJ,EAAS;AACL,4BAAQ,WAAU,KAAV,CAAgB,GAAhB,EAAqB,OAArB,CAAR;AACA,2BAAO,IAAI,OAAJ,EAAP;AACH;AACD,uBAAO,IAAP;AACH,aA9EW;;AAgFZ;AACA;AACA,uBAAW,mBAAU,IAAV,EAAgB,OAAhB,EAAyB;AAChC,oBAAI,CAAC,KAAK,MAAN,IAAgB,QAAQ,QAA5B,EAAsC;AAClC,2BAAO,IAAP;AACH;AACD,oBAAI,OAAO,IAAX;AAAA,oBACI,OAAO,KAAK,KAAL,CAAW,KAAK,KAAhB,CADX;AAAA,oBAEI,MAAM,EAAE,QAAF,EAFV;AAGA,oBAAI,KAAK,MAAL,CAAY,MAAhB,EAAwB;AACpB,yBAAK,MAAL,CAAY,MAAZ,CACI,UAAU,IAAV,EAAgB;AACZ,4BAAI,CAAC,KAAK,IAAV,EAAgB;AACZ,gCAAI,KAAK,IAAL,KAAc,KAAK,IAAvB,EAA6B;AACzB,qCAAK,IAAL,GAAY,KAAK,IAAjB;AACH,6BAFD,MAEO,IAAI,KAAK,IAAT,EAAe;AAClB,qCAAK,IAAL,GAAY,KAAK,IAAL,CAAU,OAAV,CACR,QADQ,EAER,MAAM,KAAK,IAAL,CAAU,MAAV,CAAiB,CAAjB,CAFE,CAAZ;AAIH;AACJ;AACD;AACA,4BAAI,KAAK,IAAL,KAAc,KAAK,IAAvB,EAA6B;AACzB,mCAAO,KAAK,SAAZ;AACH;AACD;AACA;AACA,6BAAK,KAAL,CAAW,KAAK,KAAhB,IAAyB,IAAzB;AACA,4BAAI,WAAJ,CAAgB,IAAhB,EAAsB,CAAC,IAAD,CAAtB;AACH,qBApBL,EAqBI,QAAQ,IAAR,IAAgB,KAAK,IArBzB,EAsBI,QAAQ,OAtBZ;AAwBH,iBAzBD,MAyBO;AACH,2BAAO,IAAP;AACH;AACD,uBAAO,IAAI,OAAJ,EAAP;AACH,aAtHW;;AAwHZ,+BAAmB,2BAAU,IAAV,EAAgB,OAAhB,EAAyB;AACxC,oBAAI,QAAQ,QAAZ,EAAsB;AAClB,2BAAO,IAAP;AACH;AACD,oBAAI,OAAO,IAAX;AAAA,oBACI,MAAM,EAAE,QAAF,EADV;AAEA,2BAAU,aAAV,CAAwB,KAAK,KAAL,CAAW,KAAK,KAAhB,CAAxB,EAAgD,UAAU,MAAV,EAAkB;AAC9D,sBAAE,MAAF,CAAS,IAAT,EAAe,MAAf;AACA,wBAAI,WAAJ,CAAgB,IAAhB,EAAsB,CAAC,IAAD,CAAtB;AACH,iBAHD,EAGG,OAHH;AAIA,uBAAO,IAAI,OAAJ,EAAP;AACH,aAnIW;;AAqIZ,+BAAmB,2BAAU,IAAV,EAAgB,OAAhB,EAAyB;AACxC,oBAAI,EAAE,KAAK,SAAL,IAAkB,KAAK,MAAvB,IACE,KAAK,MAAL,CAAY,MADd,IACwB,CAAC,QAAQ,QADnC,CAAJ,EACkD;AAC9C,2BAAO,IAAP;AACH;AACD,oBAAI,OAAO,KAAK,KAAL,CAAW,KAAK,KAAhB,CAAX;AAAA,oBACI,OAAO,IAAI,IAAJ,CAAS,CACZ,KAAK,SADO;AAEZ;AACA;AACA,qBAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,EAA2B,EAA3B,CAJY,CAAT,EAKJ,EAAC,MAAM,KAAK,IAAZ,EALI,CADX;AAOA,qBAAK,IAAL,GAAY,KAAK,IAAjB;AACA,qBAAK,KAAL,CAAW,KAAK,KAAhB,IAAyB,IAAzB;AACA,uBAAO,IAAP;AACH,aApJW;;AAsJZ;AACA;AACA,sBAAU,kBAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC/B,oBAAI,KAAK,OAAL,IAAgB,CAAC,QAAQ,QAA7B,EAAuC;AACnC,yBAAK,KAAL,CAAW,KAAK,KAAhB,EAAuB,QAAQ,IAAR,IAAgB,SAAvC,IAAoD,KAAK,OAAzD;AACH;AACD,uBAAO,IAAP;AACH,aA7JW;;AA+JZ,mCAAuB,+BAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC5C,oBAAI,CAAC,QAAQ,QAAb,EAAuB;AACnB,2BAAO,KAAK,GAAZ;AACA,2BAAO,KAAK,MAAZ;AACA,2BAAO,KAAK,OAAZ;AACA,2BAAO,KAAK,SAAZ;AACH;AACD,uBAAO,IAAP;AACH;;AAvKW;;AAlCiC,KAArD;AA+MH,CArTC,CAAD","file":"jquery.fileupload-image-compiled.js","sourcesContent":["/*\n * jQuery File Upload Image Preview & Resize Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window, Blob */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            'load-image',\n            'load-image-meta',\n            'load-image-exif',\n            'canvas-to-blob',\n            './jquery.fileupload-process'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(\n            require('jquery'),\n            require('blueimp-load-image/js/load-image'),\n            require('blueimp-load-image/js/load-image-meta'),\n            require('blueimp-load-image/js/load-image-exif'),\n            require('blueimp-canvas-to-blob'),\n            require('./jquery.fileupload-process')\n        );\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery,\n            window.loadImage\n        );\n    }\n}(function ($, loadImage) {\n    'use strict';\n\n    // Prepend to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.unshift(\n        {\n            action: 'loadImageMetaData',\n            disableImageHead: '@',\n            disableExif: '@',\n            disableExifThumbnail: '@',\n            disableExifSub: '@',\n            disableExifGps: '@',\n            disabled: '@disableImageMetaDataLoad'\n        },\n        {\n            action: 'loadImage',\n            // Use the action as prefix for the \"@\" options:\n            prefix: true,\n            fileTypes: '@',\n            maxFileSize: '@',\n            noRevoke: '@',\n            disabled: '@disableImageLoad'\n        },\n        {\n            action: 'resizeImage',\n            // Use \"image\" as prefix for the \"@\" options:\n            prefix: 'image',\n            maxWidth: '@',\n            maxHeight: '@',\n            minWidth: '@',\n            minHeight: '@',\n            crop: '@',\n            orientation: '@',\n            forceResize: '@',\n            disabled: '@disableImageResize'\n        },\n        {\n            action: 'saveImage',\n            quality: '@imageQuality',\n            type: '@imageType',\n            disabled: '@disableImageResize'\n        },\n        {\n            action: 'saveImageMetaData',\n            disabled: '@disableImageMetaDataSave'\n        },\n        {\n            action: 'resizeImage',\n            // Use \"preview\" as prefix for the \"@\" options:\n            prefix: 'preview',\n            maxWidth: '@',\n            maxHeight: '@',\n            minWidth: '@',\n            minHeight: '@',\n            crop: '@',\n            orientation: '@',\n            thumbnail: '@',\n            canvas: '@',\n            disabled: '@disableImagePreview'\n        },\n        {\n            action: 'setImage',\n            name: '@imagePreviewName',\n            disabled: '@disableImagePreview'\n        },\n        {\n            action: 'deleteImageReferences',\n            disabled: '@disableImageReferencesDeletion'\n        }\n    );\n\n    // The File Upload Resize plugin extends the fileupload widget\n    // with image resize functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The regular expression for the types of images to load:\n            // matched against the file type:\n            loadImageFileTypes: /^image\\/(gif|jpeg|png|svg\\+xml)$/,\n            // The maximum file size of images to load:\n            loadImageMaxFileSize: 10000000, // 10MB\n            // The maximum width of resized images:\n            imageMaxWidth: 1920,\n            // The maximum height of resized images:\n            imageMaxHeight: 1080,\n            // Defines the image orientation (1-8) or takes the orientation\n            // value from Exif data if set to true:\n            imageOrientation: false,\n            // Define if resized images should be cropped or only scaled:\n            imageCrop: false,\n            // Disable the resize image functionality by default:\n            disableImageResize: true,\n            // The maximum width of the preview images:\n            previewMaxWidth: 80,\n            // The maximum height of the preview images:\n            previewMaxHeight: 80,\n            // Defines the preview orientation (1-8) or takes the orientation\n            // value from Exif data if set to true:\n            previewOrientation: true,\n            // Create the preview using the Exif data thumbnail:\n            previewThumbnail: true,\n            // Define if preview images should be cropped or only scaled:\n            previewCrop: false,\n            // Define if preview images should be resized as canvas elements:\n            previewCanvas: true\n        },\n\n        processActions: {\n\n            // Loads the image given via data.files and data.index\n            // as img element, if the browser supports the File API.\n            // Accepts the options fileTypes (regular expression)\n            // and maxFileSize (integer) to limit the files to load:\n            loadImage: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    file = data.files[data.index],\n                    dfd = $.Deferred();\n                if (($.type(options.maxFileSize) === 'number' &&\n                            file.size > options.maxFileSize) ||\n                        (options.fileTypes &&\n                            !options.fileTypes.test(file.type)) ||\n                        !loadImage(\n                            file,\n                            function (img) {\n                                if (img.src) {\n                                    data.img = img;\n                                }\n                                dfd.resolveWith(that, [data]);\n                            },\n                            options\n                        )) {\n                    return data;\n                }\n                return dfd.promise();\n            },\n\n            // Resizes the image given as data.canvas or data.img\n            // and updates data.canvas or data.img with the resized image.\n            // Also stores the resized image as preview property.\n            // Accepts the options maxWidth, maxHeight, minWidth,\n            // minHeight, canvas and crop:\n            resizeImage: function (data, options) {\n                if (options.disabled || !(data.canvas || data.img)) {\n                    return data;\n                }\n                options = $.extend({canvas: true}, options);\n                var that = this,\n                    dfd = $.Deferred(),\n                    img = (options.canvas && data.canvas) || data.img,\n                    resolve = function (newImg) {\n                        if (newImg && (newImg.width !== img.width ||\n                                newImg.height !== img.height ||\n                                options.forceResize)) {\n                            data[newImg.getContext ? 'canvas' : 'img'] = newImg;\n                        }\n                        data.preview = newImg;\n                        dfd.resolveWith(that, [data]);\n                    },\n                    thumbnail;\n                if (data.exif) {\n                    if (options.orientation === true) {\n                        options.orientation = data.exif.get('Orientation');\n                    }\n                    if (options.thumbnail) {\n                        thumbnail = data.exif.get('Thumbnail');\n                        if (thumbnail) {\n                            loadImage(thumbnail, resolve, options);\n                            return dfd.promise();\n                        }\n                    }\n                    // Prevent orienting the same image twice:\n                    if (data.orientation) {\n                        delete options.orientation;\n                    } else {\n                        data.orientation = options.orientation;\n                    }\n                }\n                if (img) {\n                    resolve(loadImage.scale(img, options));\n                    return dfd.promise();\n                }\n                return data;\n            },\n\n            // Saves the processed image given as data.canvas\n            // inplace at data.index of data.files:\n            saveImage: function (data, options) {\n                if (!data.canvas || options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    file = data.files[data.index],\n                    dfd = $.Deferred();\n                if (data.canvas.toBlob) {\n                    data.canvas.toBlob(\n                        function (blob) {\n                            if (!blob.name) {\n                                if (file.type === blob.type) {\n                                    blob.name = file.name;\n                                } else if (file.name) {\n                                    blob.name = file.name.replace(\n                                        /\\.\\w+$/,\n                                        '.' + blob.type.substr(6)\n                                    );\n                                }\n                            }\n                            // Don't restore invalid meta data:\n                            if (file.type !== blob.type) {\n                                delete data.imageHead;\n                            }\n                            // Store the created blob at the position\n                            // of the original file in the files list:\n                            data.files[data.index] = blob;\n                            dfd.resolveWith(that, [data]);\n                        },\n                        options.type || file.type,\n                        options.quality\n                    );\n                } else {\n                    return data;\n                }\n                return dfd.promise();\n            },\n\n            loadImageMetaData: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var that = this,\n                    dfd = $.Deferred();\n                loadImage.parseMetaData(data.files[data.index], function (result) {\n                    $.extend(data, result);\n                    dfd.resolveWith(that, [data]);\n                }, options);\n                return dfd.promise();\n            },\n\n            saveImageMetaData: function (data, options) {\n                if (!(data.imageHead && data.canvas &&\n                        data.canvas.toBlob && !options.disabled)) {\n                    return data;\n                }\n                var file = data.files[data.index],\n                    blob = new Blob([\n                        data.imageHead,\n                        // Resized images always have a head size of 20 bytes,\n                        // including the JPEG marker and a minimal JFIF header:\n                        this._blobSlice.call(file, 20)\n                    ], {type: file.type});\n                blob.name = file.name;\n                data.files[data.index] = blob;\n                return data;\n            },\n\n            // Sets the resized version of the image as a property of the\n            // file object, must be called after \"saveImage\":\n            setImage: function (data, options) {\n                if (data.preview && !options.disabled) {\n                    data.files[data.index][options.name || 'preview'] = data.preview;\n                }\n                return data;\n            },\n\n            deleteImageReferences: function (data, options) {\n                if (!options.disabled) {\n                    delete data.img;\n                    delete data.canvas;\n                    delete data.preview;\n                    delete data.imageHead;\n                }\n                return data;\n            }\n\n        }\n\n    });\n\n}));\n"]}