{"version":3,"sources":["jquery.fileupload-validate.js"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;AAWA;;AAEA,CAAE,WAAU,OAAV,EAAmB;AACjB;;AACA,QAAI,OAAO,MAAP,KAAkB,UAAlB,IAAgC,OAAO,GAA3C,EAAgD;AAC5C;AACA,eAAO,CACH,QADG,EAEH,6BAFG,CAAP,EAGG,OAHH;AAIH,KAND,MAMO,IAAI,QAAO,OAAP,yCAAO,OAAP,OAAmB,QAAvB,EAAiC;AACpC;AACA,gBAAQ,QAAQ,QAAR,CAAR;AACH,KAHM,MAGA;AACH;AACA,gBACI,OAAO,MADX;AAGH;AACJ,CAjBC,EAiBA,UAAU,CAAV,EAAa;AACX;;AAEA;;AACA,MAAE,OAAF,CAAU,UAAV,CAAqB,SAArB,CAA+B,OAA/B,CAAuC,YAAvC,CAAoD,IAApD,CACI;AACI,gBAAQ,UADZ;AAEI;AACA;AACA,gBAAQ,IAJZ;AAKI;AACA,yBAAiB,GANrB;AAOI,qBAAa,GAPjB;AAQI,qBAAa,GARjB;AASI,0BAAkB,GATtB;AAUI,kBAAU;AAVd,KADJ;;AAeA;AACA;AACA,MAAE,MAAF,CAAS,oBAAT,EAA+B,EAAE,OAAF,CAAU,UAAzC,EAAqD;;AAEjD,iBAAS;AACL;;;;;;;;;;;;AAYA;AACA;AACA,8BAAkB,EAAE,IAff;;AAiBL;AACA,sBAAU;AACN,kCAAkB,kCADZ;AAEN,iCAAiB,uBAFX;AAGN,6BAAa,mBAHP;AAIN,6BAAa;AAJP;AAlBL,SAFwC;;AA4BjD,wBAAgB;;AAEZ,sBAAU,kBAAU,IAAV,EAAgB,OAAhB,EAAyB;AAC/B,oBAAI,QAAQ,QAAZ,EAAsB;AAClB,2BAAO,IAAP;AACH;AACD,oBAAI,MAAM,EAAE,QAAF,EAAV;AAAA,oBACI,WAAW,KAAK,OADpB;AAAA,oBAEI,OAAO,KAAK,KAAL,CAAW,KAAK,KAAhB,CAFX;AAAA,oBAGI,QAHJ;AAIA,oBAAI,QAAQ,WAAR,IAAuB,QAAQ,WAAnC,EAAgD;AAC5C,+BAAW,KAAK,IAAhB;AACH;AACD,oBAAI,EAAE,IAAF,CAAO,QAAQ,gBAAf,MAAqC,QAArC,IACI,CAAC,SAAS,gBAAT,MAA+B,CAAhC,IAAqC,KAAK,KAAL,CAAW,MAAhD,GACI,QAAQ,gBAFpB,EAEsC;AAClC,yBAAK,KAAL,GAAa,SAAS,IAAT,CAAc,kBAAd,CAAb;AACH,iBAJD,MAIO,IAAI,QAAQ,eAAR,IACH,EAAE,QAAQ,eAAR,CAAwB,IAAxB,CAA6B,KAAK,IAAlC,KACF,QAAQ,eAAR,CAAwB,IAAxB,CAA6B,KAAK,IAAlC,CADA,CADD,EAE2C;AAC9C,yBAAK,KAAL,GAAa,SAAS,IAAT,CAAc,iBAAd,CAAb;AACH,iBAJM,MAIA,IAAI,WAAW,QAAQ,WAAvB,EAAoC;AACvC,yBAAK,KAAL,GAAa,SAAS,IAAT,CAAc,aAAd,CAAb;AACH,iBAFM,MAEA,IAAI,EAAE,IAAF,CAAO,QAAP,MAAqB,QAArB,IACH,WAAW,QAAQ,WADpB,EACiC;AACpC,yBAAK,KAAL,GAAa,SAAS,IAAT,CAAc,aAAd,CAAb;AACH,iBAHM,MAGA;AACH,2BAAO,KAAK,KAAZ;AACH;AACD,oBAAI,KAAK,KAAL,IAAc,KAAK,KAAL,CAAW,KAA7B,EAAoC;AAChC,yBAAK,KAAL,CAAW,KAAX,GAAmB,IAAnB;AACA,wBAAI,UAAJ,CAAe,IAAf,EAAqB,CAAC,IAAD,CAArB;AACH,iBAHD,MAGO;AACH,wBAAI,WAAJ,CAAgB,IAAhB,EAAsB,CAAC,IAAD,CAAtB;AACH;AACD,uBAAO,IAAI,OAAJ,EAAP;AACH;;AApCW;;AA5BiC,KAArD;AAsEH,CA5GC,CAAD","file":"jquery.fileupload-validate-compiled.js","sourcesContent":["/*\n * jQuery File Upload Validation Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2013, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            './jquery.fileupload-process'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(require('jquery'));\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery\n        );\n    }\n}(function ($) {\n    'use strict';\n\n    // Append to the default processQueue:\n    $.blueimp.fileupload.prototype.options.processQueue.push(\n        {\n            action: 'validate',\n            // Always trigger this action,\n            // even if the previous action was rejected:\n            always: true,\n            // Options taken from the global options map:\n            acceptFileTypes: '@',\n            maxFileSize: '@',\n            minFileSize: '@',\n            maxNumberOfFiles: '@',\n            disabled: '@disableValidation'\n        }\n    );\n\n    // The File Upload Validation plugin extends the fileupload widget\n    // with file validation functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            /*\n            // The regular expression for allowed file types, matches\n            // against either file type or file name:\n            acceptFileTypes: /(\\.|\\/)(gif|jpe?g|png)$/i,\n            // The maximum allowed file size in bytes:\n            maxFileSize: 10000000, // 10 MB\n            // The minimum allowed file size in bytes:\n            minFileSize: undefined, // No minimal file size\n            // The limit of files to be uploaded:\n            maxNumberOfFiles: 10,\n            */\n\n            // Function returning the current number of files,\n            // has to be overriden for maxNumberOfFiles validation:\n            getNumberOfFiles: $.noop,\n\n            // Error and info messages:\n            messages: {\n                maxNumberOfFiles: 'Maximum number of files exceeded',\n                acceptFileTypes: 'File type not allowed',\n                maxFileSize: 'File is too large',\n                minFileSize: 'File is too small'\n            }\n        },\n\n        processActions: {\n\n            validate: function (data, options) {\n                if (options.disabled) {\n                    return data;\n                }\n                var dfd = $.Deferred(),\n                    settings = this.options,\n                    file = data.files[data.index],\n                    fileSize;\n                if (options.minFileSize || options.maxFileSize) {\n                    fileSize = file.size;\n                }\n                if ($.type(options.maxNumberOfFiles) === 'number' &&\n                        (settings.getNumberOfFiles() || 0) + data.files.length >\n                            options.maxNumberOfFiles) {\n                    file.error = settings.i18n('maxNumberOfFiles');\n                } else if (options.acceptFileTypes &&\n                        !(options.acceptFileTypes.test(file.type) ||\n                        options.acceptFileTypes.test(file.name))) {\n                    file.error = settings.i18n('acceptFileTypes');\n                } else if (fileSize > options.maxFileSize) {\n                    file.error = settings.i18n('maxFileSize');\n                } else if ($.type(fileSize) === 'number' &&\n                        fileSize < options.minFileSize) {\n                    file.error = settings.i18n('minFileSize');\n                } else {\n                    delete file.error;\n                }\n                if (file.error || data.files.error) {\n                    data.files.error = true;\n                    dfd.rejectWith(this, [data]);\n                } else {\n                    dfd.resolveWith(this, [data]);\n                }\n                return dfd.promise();\n            }\n\n        }\n\n    });\n\n}));\n"]}