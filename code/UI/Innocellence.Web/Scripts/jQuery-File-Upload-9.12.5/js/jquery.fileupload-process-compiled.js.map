{"version":3,"sources":["jquery.fileupload-process.js"],"names":[],"mappings":"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","file":"jquery.fileupload-process-compiled.js","sourcesContent":["/*\n * jQuery File Upload Processing Plugin\n * https://github.com/blueimp/jQuery-File-Upload\n *\n * Copyright 2012, Sebastian Tschan\n * https://blueimp.net\n *\n * Licensed under the MIT license:\n * http://www.opensource.org/licenses/MIT\n */\n\n/* jshint nomen:false */\n/* global define, require, window */\n\n;(function (factory) {\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // Register as an anonymous AMD module:\n        define([\n            'jquery',\n            './jquery.fileupload'\n        ], factory);\n    } else if (typeof exports === 'object') {\n        // Node/CommonJS:\n        factory(require('jquery'));\n    } else {\n        // Browser globals:\n        factory(\n            window.jQuery\n        );\n    }\n}(function ($) {\n    'use strict';\n\n    var originalAdd = $.blueimp.fileupload.prototype.options.add;\n\n    // The File Upload Processing plugin extends the fileupload widget\n    // with file processing functionality:\n    $.widget('blueimp.fileupload', $.blueimp.fileupload, {\n\n        options: {\n            // The list of processing actions:\n            processQueue: [\n                /*\n                {\n                    action: 'log',\n                    type: 'debug'\n                }\n                */\n            ],\n            add: function (e, data) {\n                var $this = $(this);\n                data.process(function () {\n                    return $this.fileupload('process', data);\n                });\n                originalAdd.call(this, e, data);\n            }\n        },\n\n        processActions: {\n            /*\n            log: function (data, options) {\n                console[options.type](\n                    'Processing \"' + data.files[data.index].name + '\"'\n                );\n            }\n            */\n        },\n\n        _processFile: function (data, originalData) {\n            var that = this,\n                dfd = $.Deferred().resolveWith(that, [data]),\n                chain = dfd.promise();\n            this._trigger('process', null, data);\n            $.each(data.processQueue, function (i, settings) {\n                var func = function (data) {\n                    if (originalData.errorThrown) {\n                        return $.Deferred()\n                                .rejectWith(that, [originalData]).promise();\n                    }\n                    return that.processActions[settings.action].call(\n                        that,\n                        data,\n                        settings\n                    );\n                };\n                chain = chain.then(func, settings.always && func);\n            });\n            chain\n                .done(function () {\n                    that._trigger('processdone', null, data);\n                    that._trigger('processalways', null, data);\n                })\n                .fail(function () {\n                    that._trigger('processfail', null, data);\n                    that._trigger('processalways', null, data);\n                });\n            return chain;\n        },\n\n        // Replaces the settings of each processQueue item that\n        // are strings starting with an \"@\", using the remaining\n        // substring as key for the option map,\n        // e.g. \"@autoUpload\" is replaced with options.autoUpload:\n        _transformProcessQueue: function (options) {\n            var processQueue = [];\n            $.each(options.processQueue, function () {\n                var settings = {},\n                    action = this.action,\n                    prefix = this.prefix === true ? action : this.prefix;\n                $.each(this, function (key, value) {\n                    if ($.type(value) === 'string' &&\n                            value.charAt(0) === '@') {\n                        settings[key] = options[\n                            value.slice(1) || (prefix ? prefix +\n                                key.charAt(0).toUpperCase() + key.slice(1) : key)\n                        ];\n                    } else {\n                        settings[key] = value;\n                    }\n\n                });\n                processQueue.push(settings);\n            });\n            options.processQueue = processQueue;\n        },\n\n        // Returns the number of files currently in the processsing queue:\n        processing: function () {\n            return this._processing;\n        },\n\n        // Processes the files given as files property of the data parameter,\n        // returns a Promise object that allows to bind callbacks:\n        process: function (data) {\n            var that = this,\n                options = $.extend({}, this.options, data);\n            if (options.processQueue && options.processQueue.length) {\n                this._transformProcessQueue(options);\n                if (this._processing === 0) {\n                    this._trigger('processstart');\n                }\n                $.each(data.files, function (index) {\n                    var opts = index ? $.extend({}, options) : options,\n                        func = function () {\n                            if (data.errorThrown) {\n                                return $.Deferred()\n                                        .rejectWith(that, [data]).promise();\n                            }\n                            return that._processFile(opts, data);\n                        };\n                    opts.index = index;\n                    that._processing += 1;\n                    that._processingQueue = that._processingQueue.then(func, func)\n                        .always(function () {\n                            that._processing -= 1;\n                            if (that._processing === 0) {\n                                that._trigger('processstop');\n                            }\n                        });\n                });\n            }\n            return this._processingQueue;\n        },\n\n        _create: function () {\n            this._super();\n            this._processing = 0;\n            this._processingQueue = $.Deferred().resolveWith(this)\n                .promise();\n        }\n\n    });\n\n}));\n"]}