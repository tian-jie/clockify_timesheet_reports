@{
    ViewBag.Title = "项目估算列表";
}

<body>
    <div id="toolbar" class="btn-group">
        <input id="upload-input" class="form-control " multiple="multiple" type="file" name="file" />
        <button id="btn_update" type="button" class="btn btn-default btn-save" onclick="return uploadHDFile(getElementById('upload-input'));">
            <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>Update
        </button>

    </div>

    <div class="widget-box">
        <div class="widget-content nopadding">
            <div class="table table-bordered data-table" id="table">

            </div>
        </div>
    </div>


</body>

@section scripts_Foot
{
    <script language="javascript">
        var roleTitles = [];
        $(document).ready(function () {
            refreshTable();
        });

        function refreshTable() {
            $.ajax({
                url: "GetList",
                method: 'POST',
                data: {
                    projectGid: getQueryVariable("projectGid")
                },
                success: function (data) {
                    //document.getElementById('ProjectGid').innerHTML = data.ProjectGid;
                    //document.getElementById('ProjectName').innerHTML = data.ProjectName;
                    //document.getElementById('EstimateEffort').innerHTML = data.EstimatedSpentManHour;
                    //document.getElementById('EstimateEffortRate').innerHTML = data.EstimatedSpentManHourRate;
                    //document.getElementById('SpentManHour').innerHTML = data.SpentManHour;
                    //document.getElementById('SpentManHourRate').innerHTML = data.SpentManHourRate;
                    //document.getElementById('UsedPercetange').innerHTML = (data.SpentManHourRate * 100 / data.EstimatedSpentManHourRate).toFixed(2) + '%';

                    // 处理table的问题
                    var columns = [
                        {
                            name: 'EmployeeName',
                            title: 'Employee',
                            width: '120px'
                        }, {
                            name: 'EmployeeRole',
                            title: 'Role',
                            align: 'center',
                            valign: 'middle',
                            width: '180px'
                        }, {
                            name: 'EmployeeRate',
                            title: 'Rate',
                            align: 'center',
                            valign: 'middle',
                            width: '60px',
                        }, {
                            name: 'TotalHours',
                            title: 'Total Hours',
                            align: 'center',
                            valign: 'middle',
                            width: '100px'
                        }, {
                            name: 'TotalHoursRate',
                            title: 'Total Hours\n(Rate)',
                            align: 'center',
                            valign: 'middle',
                            width: '100px'
                        }];


                    if (data.length == 0) {
                        return;
                    }

                    // 补充动态列
                    // TODO: 这里缺一些，如果一个人第一周没干活，第三周才开始干，以第一个人的时间是不合理的，要按照所有人的时间做。

                    // 找出第一周，找出最后一周
                    var firstWeek = 100;
                    var lastWeek = 0;

                    $.each(data, function (j, timeEntriesGroupByEmployees) {
                        $.each(timeEntriesGroupByEmployees.TotalEffortByWeek, function (i, item) {
                            if (item.WeekNumber < firstWeek) {
                                firstWeek = item.WeekNumber;
                            }
                            if (item.WeekNumber > lastWeek) {
                                lastWeek = item.WeekNumber;
                            }
                        });
                    });


                    for (var i = firstWeek; i <= lastWeek; i++) {
                        addColumn(i, columns);
                    }


                    // 处理每行数据，动态增加data.TimeEntriesGroupByEmployeesView的列
                    $.each(data, function (i, timeEntriesGroupByEmployeesView) {
                        // 这边是人的级别
                        for (var i = firstWeek; i <= lastWeek; i++) {
                            timeEntriesGroupByEmployeesView['W' + i] = 0;
                        }

                        $.each(timeEntriesGroupByEmployeesView.TotalEffortByWeek, function (j, totalEffortByWeek) {
                            // 这里循环所有的week，合适的填数据
                            timeEntriesGroupByEmployeesView['W' + totalEffortByWeek.WeekNumber] = totalEffortByWeek.TotalHours;

                        });

                        delete timeEntriesGroupByEmployeesView.Id;
                        delete timeEntriesGroupByEmployeesView.UserId;
                        delete timeEntriesGroupByEmployeesView.TotalEffortByWeek;
                    });

                    initTable(columns, data);
                }
            });


        }
        function initTable(columns, data1) {
            var container = document.getElementById('table')

            table = jexcel(container, {
                data: data1,
                tableOverflow: true,
                tableWidth: "100%",
                tableHeight: "100%",
                freezeColumns: 5,
                footers: [['Total', '', '', '=SUMCOL(TABLE(), COLUMN())', '=SUMCOL(TABLE(), COLUMN())']],
                columns: columns
            });
        }


        function getQueryVariable(variable) {
            var query = window.location.search.substring(1);
            var vars = query.split("&");
            for (var i = 0; i < vars.length; i++) {
                var pair = vars[i].split("=");
                if (pair[0] == variable) { return pair[1]; }
            }
            return (false);
        }

        function sortNumber(a, b) {//升序
            return a - b
        }

        function addColumn(weekNumber, columns) {
            columns.push({
                name: 'W' + weekNumber,
                title: 'W' + weekNumber,
                align: 'center',
                valign: 'middle',
                width: '60px'
            });
        }

        // A custom method to SUM all the cells in the current column
        var SUMCOL = function (instance, columnId) {
            var total = 0;
            for (var j = 0; j < instance.options.data.length; j++) {
                if (Number(instance.records[j][columnId - 1].innerHTML)) {
                    total += Number(instance.records[j][columnId - 1].innerHTML);
                }
            }
            return total;
        }

        function uploadHDFile(obj) {
            var projectGid = getQueryVariable('projectGid');

            $('#btn_update').prop("disabled", true);
            $(obj).FileUpload({
                self: obj,
                url: "UploadResourcePlanExcel?ProjectGid=" + projectGid,
                allowExtension: '.xlsx',
                rewriteDocumentId: '',
                //processBarId: 'progress-bar_2',
                callBack: function (data) {
                    //$('#preview' + id).prop('src', data.result.Src);
                    //$('.formZip #ImgUrl').val(data.result.Src);
                    //$('#Download').prop('href', data.result.Src);
                    $('#btn_update').prop("disabled", false);
                    refreshTable();
                }
            });
        }
    </script>
}